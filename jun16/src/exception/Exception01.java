package exception;
//예외처리
/* Exception
 * 자바 예외 핸들링
 * 자바에서는 예외라는 것을 두고 목적에 따라서 처리(핸들링)하도록
 * 설계되어있습니다.
 * 
 * 일단 예외라는 것부터 알아보겠습니다.
 * 예외는 주로 실행시에 발생되는 모든 에러 상황을 예외로 정의합니다.
 * 물론 특정 API는 컴파일시 예외를 처리하지 않으면 컴파일 되지
 * 않는 예외들도 있습니다.
 * 
 * 예외의 정의
 * 실행시에 발생할 수 있는 모든 에러상황들
 * 
 * 자바에서는 예외가 발생되는 순서가 대략 아래와 같습니다.
 * 컴파일 → 실행 → 실행중 예외 발생 → VM이 발생한 예외의 종류 및
 * 내용을 파악한 뒤 예외 객체 생성 
 * → 발생된 코드 밖으로 예외 던지기(throw) → 예외의 콜 스택에 전이
 * → main메소드 밖까지 던지게 되면 프로그램 비정상 종료
 * 
 * 위처럼 예외는 던진다라고 표현합니다. 
 * 또한 예외는 객체이기 때문에 당연 클래스로 정의되어 있습니다.
 * 
 * 예외의 최고 클래스는 lang패키지의 Throwable입니다.
 * 자식으로는 Error와 Exception이 있습니다.
 * 
 * Error 하위 타입은 일반적으로 java 실행기 즉 VM에 관련된
 * 에러 상황들을 정의한 클래스 입니다.
 * 이러한 문제(상황)들은 프로그래머가 처리할 수 없는 것들로
 * VM 즉 JRE 전반적인 문제입니다.
 * 따라서 프로그래머는 Error 하위 타입들의 예외(에러)는
 * 처리하지 않고 무시합니다.(처리할 수 없습니다)
 * 
 * 다음 Exception이란 클래스의 하위 타입이 바로 프로그래머가
 * 처리해야 할 예외 타입들 입니다.
 * 따라서 보통 예외다라고 표현할 때 최고 클래스로는 Exception
 * 클래스를 말합니다.
 * Throwable 클래스는 자식 클래스로 Error를 가지고 있기 때문에
 * 예외의 최고 클래스로 표현하지 않습니다.
 * 
 * 
 * 예외의 종류
 * 크게 두가지로 나뉩니다.
 * 컴파일러가 관여하지 않으면서 실행시에 예외가 발생할수도
 * 발생하지 않을수도 있는 예외를 
 * [알려지지 않는 예외 (Unchecked Exception)]
 * 
 * 컴파일러가 관여하는 예외인 [알려진 예외(Checked Exception)]로
 * 구분됩니다.
 * 
 * 구분하는 방법은?
 * Exception하위 클래스 중 RuntimeException이 있는데 
 * 해당 클래스의 자식 클래스들은 모두 알려지지 않은 예외입니다.
 * 나머지는 알려진 예외입니다.
 * 
 * 
 * 422페이지 내용입니다========================================
 * 컴퓨터 하드웨어의 오작동 또는 고장으로 인해 응용프로그램
 * 실행오류가 발생하는 것을 자바에서는 에러라고 말합니다.
 * 에러는 JVM 실행에 문제가 생겼다는 것이므로 JVM위에서 실행되는
 * 프로그램을 아무리 견고하게 만들어도 결국 실행 불능이 됩니다.
 * 개발자는 이러한 에러를 극복할 방법이 없습니다.
 * 
 * 이런 에러 외 에러를 예외라고 합니다. 
 * 예외란 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해
 * 발생하는 프로그램 오류를 말합니다. 예외가 발생되면 프로그램은 
 * 바로 종료됩니다. (이건 에러와 비슷합니다)
 * 그러나 예외는 예외처리라는 것을 통해 프로그램을 종료하지 않고
 * 정상실행상태가 유지되도록 할 수 있습니다.
 * 
 * 
 * 
 * 
 * 
 */
public class Exception01 {
	public static void main(String[] args) {
		
		int[] ia = new int[5];
		
		try {			
			System.out.println(ia[0]);
			System.out.println(ia[1]);
			System.out.println(ia[2]);
			System.out.println(ia[3]);
			System.out.println(ia[5]);
		} catch (Exception e) {
			System.out.println("예외가 발생했으나");
			System.out.println("너구리가 처리했다구");
		}
		
		
		
		System.out.println("완료. 프로그램 종료합니다.");
		
		
		
		
		
		
		
	}
}
