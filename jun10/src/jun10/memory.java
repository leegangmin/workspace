package jun10;

//memory
/*
 * 호출스택은 예외처리 할 때 필요함. 기억해.
 * 
 * 메소드 영역		클래스 데이터(클래스 변수)
 * 					프로그램 실행 중 어떤 클래스가 사용되면
 * 					JVM은 해당 클래스 파일을 읽어서 클래스 데이터를
 * 					이곳에 저장하며 동시에 클래스 변수도 이곳에 생성			
 * 
 * 				
 * 호출 스택		메인 메소드(지역 변수)
 * 					메소드 작업에 필요한 메모리 공간을 제공
 * 					메소드가 호출되면 호출스택에 메소드 활용을 위한
 * 					메모리가 할당 됨. 메모리에서 메소드가 작업을 하는 동안
 * 					지역변수와 연산의 중간 결과가 저장됨.
 * 					메소드가 작업을 마치면 할당된 메모리 공간은
 * 					반환되어 비워짐.
 * 					호출스택은 제일 상위에 있는 메소드가 지금 실행중인
 * 					메소드임.
 * 					나머지는?
 * 						나머지는 모두 대기중.
 * 						※	언제나 호출스택의 제일 위에 있는 메소드가
 * 							지금 실행 중인 메소드임.
 * 							아래에 있는 메소드가 바로 위에 있는
 * 							메소드를 호출해서 사용중인 메소드임.
 * 
 * 힙 영역			인스턴스(인스턴스 변수)
 * 					인스턴스가 이곳에 생성됨.
 * 
 * -----------------------------------------------------------------------------
 * 리턴타입이 있는 메소드는 종료되기 직전 결과값을 반환함.
 * 누구에게 반환? = 자신을 호출한 메소드에게 결과값을 반환
 * 누구? 대기타고 있는 호출 메소드가 받아서 프로그램을 진행함.
 * 
 * 
 * 
 * 
 */
public class memory {
	public static void main(String[] args) {
		
		System.out.println("메인 메소드 시작");
		
		first();
		
		System.out.println("메인 메소드 종료");
		
		
	}
	
	public static void first() {
		
		System.out.println("first 메소드 시작");
		
		second();
		
		System.out.println("first 메소드 종료");
	}
	
	public static void second() {
		System.out.println("second 메소드 시작");
		System.out.println("second 메소드 종료");
	
		
	}
	
}
